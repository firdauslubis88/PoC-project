/* ----------------------------------------
* Fast Robust Matching Algorithm
* version 1.0.2
* 
* Imaging Media Research Center @ KIST
* Min-Hyuk Sung (smh0816@imrc.kist.re.kr)
* Updated: Feb 22, 2012
* ---------------------------------------- */


#ifndef __FAST_ROBUST_H__
#define __FAST_ROBUST_H__

#include <opencv/cv.h>

#define DISSIMILAR_SCORE		 4
#define FAST_CORNER_THRESHOLD	60
#define USE_GLU_PERSPECTIVE


class FastRobustMatching
{
public:

	/**
	* This function is called once at the beginning
	* @param _feature_file		A database file generated by 'Training.exe'
	* @param _query_width		Camera input image size (width)
	* @param _query_height		Camera input image size (height)
	*/
	static bool initialize(const char* _feature_file,
		int _query_width, int _query_height);


	/**
	* This function is called every frame
	* @param _query			RGB Camera input image
	*/
	static bool matching(IplImage *_query);


#ifndef USE_GLU_PERSPECTIVE
	/**
	* This function is called for openGL Rendering
	* NOTICE: This function is NOT defined when the option
	* 'USE_GLU_PERSPECTIVE' is defined
	* Ex)
	* glMatrixMode(GL_PROJECTION);
	* glLoadMatrixd(FastRobust::GetFrustumMatrix());
	*/
	static double *get_frustum_matrix();
#endif


	/**
	* This function is called for openGL Rendering
	* Ex)
	* glMatrixMode(GL_MODELVIEW);
	* glLoadMatrixd(FastRobust::GetModelviewMatrix());
	*/
	static double *get_modelview_matrix();


	/**
	* This function provides image box corner positions
	* @param _corners		Corner 2D positions
	*/
	static void get_box_corners(double _corners[4][2]);


	/**
	* This function provides image box corner positions in 3D space
	* @param _corners		Corner 3D positions
	*/
	static void get_box_corners_3D(double _corners[4][3]);


	/**
	* This function provides 3D axes positions
	* @param _axes			Axes 3D positions
	*/
	static void get_axes(double _axes[4][3]);


	typedef std::vector< std::pair<CvPoint, CvPoint> >	MatchPair;


	/**
	* This function provides position of matched point pairs
	* @param _pairs			Position of both matched point pairs
	*/
	static void get_matched_pairs(MatchPair &_pairs);


	/**
	* This function provides position of matched point pairs (inliers only)
	* @param _pairs			Position of both matched point pairs
	*/
	static void get_matched_inlier_pairs(MatchPair &_pairs);
};

#endif // __FAST_ROBUST_H__